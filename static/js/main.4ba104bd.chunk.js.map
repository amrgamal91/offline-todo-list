{"version":3,"sources":["components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","todo","toggleTodo","deleteTodo","completed","Form","Group","controlId","InputGroup","className","Prepend","Checkbox","type","label","name","checked","complete","onChange","Control","plaintext","readOnly","value","Append","Button","onClick","id","size","variant","TodoList","todos","map","key","LOCAL_STORAGE_KEY_TODOS","LOCAL_STORAGE_KEY_COMPLETED_TODOS","App","useState","settodos","completedTodos","setcompletedTodos","todoNameRef","useRef","handleToggle","todoObject","newCompletedTodos","completedTodo","find","filter","newTodos","useEffect","storedTodos","JSON","parse","localStorage","getItem","setItem","stringify","storedCompletedTodos","Container","Row","Col","md","span","offset","lg","FormControl","ref","aria-label","aria-describedby","placeholder","e","taskName","current","prevTodos","uuidv4","item","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ba104bd.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\n\nexport default function Todo({ todo, toggleTodo, deleteTodo, completed }) {\n  function handleTodoClick() {\n    toggleTodo(todo);\n  }\n\n  function handleDeleteClick() {\n    deleteTodo(todo.id);\n  }\n\n  return (\n      <Form.Group controlId=\"formBasicCheckbox\">\n        \n        <InputGroup className=\"mb-3\">\n          <InputGroup.Prepend>\n            <InputGroup.Checkbox\n              type=\"checkbox\"\n              label={todo.name}\n              checked={todo.complete}\n              onChange={handleTodoClick}\n            />\n          </InputGroup.Prepend>\n          <Form.Control className=\"single-todo-name\" plaintext readOnly value={todo.name} />\n          <InputGroup.Append>\n            {!completed && (\n              <Button onClick={handleDeleteClick} size=\"sm\" variant=\"danger\">\n                {\" \"}\n                X{\" \"}\n              </Button>\n            )}\n          </InputGroup.Append>\n        </InputGroup>\n      </Form.Group>\n    \n  );\n}\n\n\n\n","import React from \"react\";\nimport Todo from \"./Todo\";\n\nexport default function TodoList({ todos, toggleTodo, deleteTodo }) {\n  return todos.map(todo => {\n    return (\n      <Todo\n        key={todo.id}\n        todo={todo}\n        toggleTodo={toggleTodo}\n        deleteTodo={deleteTodo}\n        completed={todo.complete}\n      />\n    );\n  });\n}\n","import React, { useState, useRef, useEffect } from \"react\";\nimport \"./App.css\";\nimport uuidv4 from \"uuid/v4\";\nimport TodoList from \"./components/TodoList\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Button from \"react-bootstrap/Button\";\n\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  InputGroup,\n  FormControl\n} from \"react-bootstrap\";\n\nconst LOCAL_STORAGE_KEY_TODOS = \"todoApp.todos\";\nconst LOCAL_STORAGE_KEY_COMPLETED_TODOS = \"todoApp.todos.completed\";\n\nfunction App() {\n  const [todos, settodos] = useState([]);\n  const [completedTodos, setcompletedTodos] = useState([]);\n  const todoNameRef = useRef();\n\n  useEffect(() => {\n    const storedTodos = JSON.parse(\n      localStorage.getItem(LOCAL_STORAGE_KEY_TODOS)\n    );\n    if (storedTodos) settodos(storedTodos);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY_TODOS, JSON.stringify(todos));\n    // console.log(\"here is the todo item : \"+JSON.stringify(todos));\n  }, [todos]);\n\n  useEffect(() => {\n    const storedCompletedTodos = JSON.parse(\n      localStorage.getItem(LOCAL_STORAGE_KEY_COMPLETED_TODOS)\n    );\n    if (storedCompletedTodos) setcompletedTodos(storedCompletedTodos);\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\n      LOCAL_STORAGE_KEY_COMPLETED_TODOS,\n      JSON.stringify(completedTodos)\n    );\n  }, [completedTodos]);\n\n\n  function handleAddTodo(e) {\n    const taskName = todoNameRef.current.value;\n    if (taskName === \"\") return;\n    settodos(prevTodos => {\n      return [{ id: uuidv4(), name: taskName, complete: false }, ...prevTodos];\n    });\n    todoNameRef.current.value = null;\n  }\n\n  function handleToggle(todoObject) {\n    // console.log(\"todo obj : \"+ JSON.stringify(todoObject));\n    if (!todoObject.complete) {\n      // console.log(\"here in if\");\n      let newTodos = [...todos];\n      const todo = newTodos.find(todo => todo.id === todoObject.id);\n      if (todo) {\n        todo.complete = true;\n        newTodos = newTodos.filter(todo => todo.id !== todoObject.id);\n        settodos(newTodos);\n        const newCompletedTodos = [...completedTodos, todo];\n        setcompletedTodos(newCompletedTodos);\n      }\n    } else {\n      // console.log(\"here in else\");\n      let newCompletedTodos = [...completedTodos];\n      const completedTodo = newCompletedTodos.find(\n        todo => todo.id === todoObject.id\n      );\n      completedTodo.complete = false;\n      newCompletedTodos = newCompletedTodos.filter(\n        todo => todo.id !== todoObject.id\n      );\n      setcompletedTodos(newCompletedTodos);\n      const newTodos = [...todos, completedTodo];\n      settodos(newTodos);\n    }\n  }\n\n  function deleteCompletedTasks() {\n    setcompletedTodos([]);\n  }\n\n  function deleteSingleTask(id) {\n    let newTodos = [...todos];\n    newTodos = newTodos.filter(item => item.id !== id);\n    settodos(newTodos);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Offline-TodoList</h1>\n      <Container>\n        <Row>\n          <Col md={{ span: 6, offset: 3 }}>\n            <Row>\n              <Col md={12} lg={12}>\n                <Form className=\"task-form\">\n                  <Form.Group controlId=\"header\">\n                    <InputGroup className=\"mb-3\">\n                      <FormControl\n                        ref={todoNameRef}\n                        aria-label=\"todoName\"\n                        aria-describedby=\"add todo task here \"\n                        placeholder=\"Add task here ....\"\n                      />\n                      <InputGroup.Append>\n                        <Button\n                          onClick={handleAddTodo}\n                          size=\"default\"\n                          variant=\"info\"\n                          type=\"submit\"\n                        >\n                          +\n                        </Button>\n                      </InputGroup.Append>\n                    </InputGroup>\n                  </Form.Group>\n                  <TodoList\n                    todos={todos}\n                    toggleTodo={handleToggle}\n                    deleteTodo={deleteSingleTask}\n                  ></TodoList>\n                </Form>\n              </Col>\n            </Row>\n\n            <Row>\n              <div className=\"seprator\">\n                <Col md={6} lg={6} className=\"done-col\">\n                  <h2 className=\"done-title\">Done</h2>\n                </Col>\n                <Col md={6} lg={6} className=\"deleteAll-col\">\n                  <Button\n                    onClick={deleteCompletedTasks}\n                    size=\"sm\"\n                    variant=\"danger\"\n                    className=\"btn-delete-all\"\n                  >\n                    Delete Completed\n                  </Button>\n                </Col>\n              </div>\n            </Row>\n\n            <Row>\n              <Col md={12} lg={12}>\n                <Form className=\"task-form-completed\">\n                  <Row>\n                    <Col md={12} lg={12}>\n                      <TodoList\n                        todos={completedTodos}\n                        toggleTodo={handleToggle}\n                      ></TodoList>\n                    </Col>\n                  </Row>\n                </Form>\n              </Col>\n            </Row>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}